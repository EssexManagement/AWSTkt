AWSTemplateFormatVersion: '2010-09-09'
Transform:
- AWS::Serverless-2016-10-31

Description: >
  AWS SAM project w/ Powertools for lambda named 'RDSInstanceSetup';
  Deomnstrates how to Connect to a RDS-Proxy // DB-Proxy // Database-proxy via IAM-only!
  See ./devops/RDSInstanceSetup/README.md for details on how to use this AWS-SAM template.

Parameters:
  Tier:
    Type: String
    Description: dev | int | uat | prod | some-developer-branch

  EnterpriseName:
    Type: String
    Description: >-
        See FACTrial project's git-repo's constants.py file for further details
    Default: "nih-nci"  ### Used in bucket-name.  So, must be 100% lower-case!!!

  AppName:
    Type: String
    Description: >-
        See FACTrial project's git-repo's constants.py file for further details
    Default: "FACT"

  ComponentName:
    Type: String
    Description: >-
        See FACTrial project's git-repo's constants.py file for further details
    Default: "backend"

  ApplnGroupName:
    Type: String
    Description: >-
        This is mandatory for organizing multiple ùúÜs into one App (under Application-section of ùúÜ-console)
    Default: "FACTrial"

  DBPName:
    Type: String
    Default: stateful-aurorav2-pg-16

  DBP:
    Type: String
    Description: >-
      Name of the DB-Proxy to use for the RDS Instance.
      Must start with `prx-`.   do --NOT--- use the prefix ~~db-proxy:~~
    Default: "prx-0e51fa5ffbac02dbb"
  DBA:
    Type: String
    Default: "AuroraV2PGAuroraV2PGSQLSecr-HU1yBXXUGyaB-1ORA0z"
  DBU:
    Type: String
    Default: "FACT-backend-sarma-Stateful/emfact_user-xVlG1l"

  DatabaseSecurityGroup:
    Type: String
    Default: "sg-0acc967abf782455c"
  PrivateSubnet1:
    Type: String
    Default: "subnet-08184de0fb0505e56"
  PrivateSubnet2:
    Type: String
    Default: "subnet-09bb39dab2b799afa"

  DateTimeStamp:
    Description: Date & Time
    Type: String
    # AllowedPattern: >-
    #   [0-9]-[0-9][0-9]-[0-9][0-9]
    #   [0-9]:[0-9][0-9]:[0-9][0-9]
    AllowedPattern: >-
      ^\d{4}(-\d{2}){2}T(\d{2}:){2}\d{2}$
    ConstraintDescription: "Date and time of STACK-creation"


Globals:
  ### https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
  ### More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst

  Function:

    Tags:
      'ApplicationName': !Ref ApplnGroupName  ### This is mandatory for organizing multiple ùúÜs into one App (under Application-section of ùúÜ-console)

    Timeout: 30
    MemorySize: 1024

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true


Conditions:
  IsValidTier: !Or
    - !Equals [!Ref Tier, "dev"]
    - !Equals [!Ref Tier, "int"]
    - !Equals [!Ref Tier, "uat"]
    - !Equals [!Ref Tier, "prod"]



Resources: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html

  MyLambdaFuncRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}"
      Description: !Sub >-
        Role for 'RDSInstanceSetup' Lambda-function created by Stack ${AWS::StackName}
      # Description: !Sub >-
      #   Role for 'RDSInstanceSetup' Lambda-function created by Stack ${AWS::StackName} on ${DateTimeStamp}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

        ### Required to connect to RDS-Proxy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

      Policies:
        - PolicyName: !Sub "${AWS::StackName}-RDS-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "SecretsManagerAccess"
                Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:ListSecretVersionIds"
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DBA}"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DBU}"
              - Sid: "KMSAccess" ### as per: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-proxy-iam-setup.html
                Effect: Allow
                Action:
                  - "kms:Decrypt"
                  - "kms:DescribeKey"
                Resource:
                  # - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:*"
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/secretsmanager"
              - Sid: "RDSClusterAccess"
                Effect: Allow
                Action:
                  - "rds:DescribeDBClusters"
                  - "rds:DescribeDBInstances"
                Resource:
                  - !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${AppName}-${ComponentName}-${Tier}-stateful-aurorav2-pg-16"
              ### Following for RDS Proxy access
              - Sid: "RDSProxyAccess"
                Effect: Allow
                Action:
                  - "rds:DescribeDBProxies"
                  - "rds:DescribeDBProxyEndpoints"
                  - "rds:DescribeDBProxyTargets"
                  - "rds:DescribeDBProxyTargetGroups"
                Resource:
                  - !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db-proxy:*"  ### code actually needs '*'
              - Sid: "RDSProxyConnect"
                Effect: Allow
                Action:
                  - "rds-db:connect"
                Resource:
                  - !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${DBP}/*"  # Allow connecting through the proxy
                  - !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${DBP}/dbuser"  # Allow connecting through the proxy
              ### IAM-Console says the following Amazon-Q generated Stmt has INVALID-ACTION
              # - Sid: "RDSProxyGenerateDBAuthToken"
              #   Effect: Allow
              #   Action:
              #     - "rds:GenerateDBAuthToken"
              #   Resource: "*"



      Tags:
        - Key: PRODUCT
          Value: 'factrial' ### CRRI rules.  Must be all lowercase.
        - Key: VERSION
          Value: 'v2.0.0'   ### CRRI rules.  Must be all lowercase.
        - Key: Environment
          Value: !If [IsValidTier, !Ref Tier, 'dev']
        # Environment: !Sub '${Tier}-${ApplnGroupName}'  ### This is mandatory for organizing multiple ùúÜs into one App (under Application-section of ùúÜ-console)
        - Key: application
          Value: !Ref AppName
        - Key: component
          Value: 'devops'
        - Key: env
          Value: !Ref Tier
        - Key: branch
          Value: 'main'
        # - Key: BUILD
        #   Value: !Ref DateTimeStamp
        - Key: SOURCE
          Value: "https://github.com/BIAD/emFACT-backend-cdk/tree/main/devops/RDSInstanceSetup/"

  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  MyLambdaFunc:
    Type: AWS::Serverless::Function
        ### More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
        ### More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub "${AWS::StackName}"
      Description: >-
        After a brand-new RDS-AuroraV2 cluster has been created w/ a Database in it, create a DB-User and ensure all GRANTS are implemented
      CodeUri: ./src
      Handler: app.lambda_handler
      Role: !GetAtt MyLambdaFuncRole.Arn
      Runtime: python3.12
      Architectures:
        - arm64

      ### Need VPC even to connect to RDS-Proxy !!!
      VpcConfig:
        SecurityGroupIds:
          - !Ref DatabaseSecurityGroup  # Security group that allows PostgreSQL access
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2  # Include all relevant private subnets

      ### Powertools env vars: https://awslabs.github.io/aws-lambda-powertools-python/#environment-variables
      Environment:
        Variables:
          DBPName: !Sub "${AppName}-${ComponentName}-${Tier}-${DBPName}"
          DBP: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db-proxy:${DBP}"
          DBA: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DBA}"
          DBU: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DBU}"
          POWERTOOLS_SERVICE_NAME: RDSInstanceSetup-Powertools
          POWERTOOLS_METRICS_NAMESPACE: "FACTrial"
          POWERTOOLS_LOGGER_LOG_LEVEL: "INFO"
          POWERTOOLS_LOGGER_SAMPLE_RATE: "1"
          POWERTOOLS_LOGGER_LOG_EVENT: "true"
          LOG_LEVEL: INFO
      Tags:
        ApplicationName: !Ref ApplnGroupName  ### This is mandatory for organizing multiple ùúÜs into one App (under Application-section of ùúÜ-console)
        PRODUCT: 'factrial' ### CRRI rules.  Must be all lowercase.
        VERSION: 'v2.0.0'   ### CRRI rules.  Must be all lowercase.
        ENVIRONMENT: !If [IsValidTier, !Ref Tier, 'dev']
        # Environment: !Sub '${Tier}-${ApplnGroupName}'  ### This is mandatory for organizing multiple ùúÜs into one App (under Application-section of ùúÜ-console)
        application: !Ref AppName
        component: 'devops'
        env: !Ref Tier
        branch: 'main'
        # BUILD: !Ref DateTimeStamp
        SOURCE: "https://github.com/BIAD/emFACT-backend-cdk/tree/main/devops/RDSInstanceSetup/"

      # Events:
      #   invoke:
      #     Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
      #     Properties:
      #       Path: /call
      #       Method: get


  # ### The Applications section of the Lambda-console includes a Monitoring tab where ..
  # ###   .. you can review an Amazon CloudWatch dashboard with aggregate metrics for the resources in your application.
  # ### https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/using-sam-cli-init.html#using-sam-cli-init-new-insights
  # ApplicationResourceGroup:
  #   Type: AWS::ResourceGroups::Group
  #   Properties:
  #     Name:
  #       Fn::Join:
  #       - ''
  #       - - ApplicationInsights-SAM-FACT-Tools-
  #         - Ref: Tier
  #     ResourceQuery:
  #       Type: CLOUDFORMATION_STACK_1_0
  #     Tags:
  #       - Key: PRODUCT
  #         Value: 'factrial' ### CRRI rules.  Must be all lowercase.
  #       - Key: VERSION
  #         Value: 'v2.0.0'   ### CRRI rules.  Must be all lowercase.
  #       - Key: ENVIRONMENT
  #         Value: !If [IsValidTier, !Ref Tier, 'dev']
  #       - Key: ENVIRONMENT
  #         Value: !Sub '${Tier}'
  #       - Key: application
  #         Value: 'FACT'
  #       - Key: component
  #         Value: 'devops'
  #       - Key: env
  #         Value: !Sub '${Tier}'
  #       - Key: branch
  #         Value: 'main'
  #       - Key: BUILD
  #         Value: !Sub "${DateTimeStamp}"
  #       - Key: SOURCE
  #         Value: "https://github.com/BIAD/cloud_eng.git/AWS-SAM/lambdas/wipeout-bucket/"

  # ApplicationInsightsMonitoring:
  #   Type: AWS::ApplicationInsights::Application
  #   ### https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationinsights-application.html
  #   Properties:
  #     ResourceGroupName:
  #       Fn::Join:
  #       - ''
  #       - - ApplicationInsights-SAM-FACT-Tools-
  #         - Ref: Tier
  #     AutoConfigurationEnabled: 'true'
  #     Tags:
  #       - Key: PRODUCT
  #         Value: 'factrial' ### CRRI rules.  Must be all lowercase.
  #       - Key: VERSION
  #         Value: 'v2.0.0'   ### CRRI rules.  Must be all lowercase.
  #       - Key: ENVIRONMENT
  #         Value: !If [IsValidTier, !Ref Tier, 'dev']
  #       - Key: ENVIRONMENT
  #         Value: !Sub '${Tier}'
  #       - Key: application
  #         Value: 'FACT'
  #       - Key: component
  #         Value: 'devops'
  #       - Key: env
  #         Value: !Sub '${Tier}'
  #       - Key: branch
  #         Value: 'main'
  #       - Key: BUILD
  #         Value: !Sub "${DateTimeStamp}"
  #       - Key: SOURCE
  #         Value: "https://github.com/BIAD/cloud_eng.git/AWS-SAM/lambdas/wipeout-bucket/"
  #   DependsOn: ApplicationResourceGroup


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # MyApi:
  #   Description: API Gateway endpoint URL for Prod stage for Lambda-function
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/call/"
  MyLambdaFunc:
    Description: Lambda Function ARN
    Value: !GetAtt MyLambdaFunc.Arn
  MyLambdaFuncIamRole:
    Description: AWS-SAM-created Implicit IAM-Role created for Lambda-function
    Value: !GetAtt MyLambdaFuncRole.Arn
